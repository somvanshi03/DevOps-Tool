#!/bin/bash

# Variables
DB_NAME="your_db_name" # replace with your database name
BACKUP_PATH="/path/to/your/backup/directory" # replace with the path to your backup directory
FILENAME="backup_$(date +%Y%m%d%H%M%S).sql" # creates a filename with a timestamp
EMAIL="your_email@example.com" # replace with your email address

# Check if backup directory exists
if [ ! -d "$BACKUP_PATH" ]; then
  mkdir -p "$BACKUP_PATH"
fi

# Take a backup using pg_dump
sudo -u postgres pg_dump "$DB_NAME" > "$BACKUP_PATH/$FILENAME"

# Check if the backup was successful and send an email notification
if [ $? -eq 0 ]; then
  echo "Backup was successful." | mail -s "PostgreSQL Backup Successful" "$EMAIL"
  echo "Backup file location: $BACKUP_PATH/$FILENAME"
else
  echo "Backup failed." | mail -s "PostgreSQL Backup Failed" "$EMAIL"
fi

## Notes

#Before running the script, make sure to:
#- Replace your_db_name with the actual name of your PostgreSQL database.
#- Replace /path/to/your/backup/directory with the actual path where you want to store your backup files.
#- Replace your_email@example.com with the email address where you want to receive the notification.

#To execute this script:
#1. Save the script to a file, for example, db_backup_email.sh.
#2. Give it execute permissions with the command: chmod +x db_backup_email.sh.
#3. Run the script: ./db_backup_email.sh.

#This script assumes that mail is installed and configured to send emails from your server. If you need help setting up mail or if you prefer to use a different method to send emails, please let me know, and I can provide further assistance.